//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameStateContext {

    public GameStateEntity maxSelectedElementEntity { get { return GetGroup(GameStateMatcher.MaxSelectedElement).GetSingleEntity(); } }
    public MaxSelectedElementComponent maxSelectedElement { get { return maxSelectedElementEntity.maxSelectedElement; } }
    public bool hasMaxSelectedElement { get { return maxSelectedElementEntity != null; } }

    public GameStateEntity SetMaxSelectedElement(int newValue) {
        if (hasMaxSelectedElement) {
            throw new Entitas.EntitasException("Could not set MaxSelectedElement!\n" + this + " already has an entity with MaxSelectedElementComponent!",
                "You should check if the context already has a maxSelectedElementEntity before setting it or use context.ReplaceMaxSelectedElement().");
        }
        var entity = CreateEntity();
        entity.AddMaxSelectedElement(newValue);
        return entity;
    }

    public void ReplaceMaxSelectedElement(int newValue) {
        var entity = maxSelectedElementEntity;
        if (entity == null) {
            entity = SetMaxSelectedElement(newValue);
        } else {
            entity.ReplaceMaxSelectedElement(newValue);
        }
    }

    public void RemoveMaxSelectedElement() {
        maxSelectedElementEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameStateEntity {

    public MaxSelectedElementComponent maxSelectedElement { get { return (MaxSelectedElementComponent)GetComponent(GameStateComponentsLookup.MaxSelectedElement); } }
    public bool hasMaxSelectedElement { get { return HasComponent(GameStateComponentsLookup.MaxSelectedElement); } }

    public void AddMaxSelectedElement(int newValue) {
        var index = GameStateComponentsLookup.MaxSelectedElement;
        var component = CreateComponent<MaxSelectedElementComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMaxSelectedElement(int newValue) {
        var index = GameStateComponentsLookup.MaxSelectedElement;
        var component = CreateComponent<MaxSelectedElementComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMaxSelectedElement() {
        RemoveComponent(GameStateComponentsLookup.MaxSelectedElement);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameStateMatcher {

    static Entitas.IMatcher<GameStateEntity> _matcherMaxSelectedElement;

    public static Entitas.IMatcher<GameStateEntity> MaxSelectedElement {
        get {
            if (_matcherMaxSelectedElement == null) {
                var matcher = (Entitas.Matcher<GameStateEntity>)Entitas.Matcher<GameStateEntity>.AllOf(GameStateComponentsLookup.MaxSelectedElement);
                matcher.componentNames = GameStateComponentsLookup.componentNames;
                _matcherMaxSelectedElement = matcher;
            }

            return _matcherMaxSelectedElement;
        }
    }
}
