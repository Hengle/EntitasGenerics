//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity minMatchCountEntity { get { return GetGroup(ConfigMatcher.MinMatchCount).GetSingleEntity(); } }
    public MinMatchCountComponent minMatchCount { get { return minMatchCountEntity.minMatchCount; } }
    public bool hasMinMatchCount { get { return minMatchCountEntity != null; } }

    public ConfigEntity SetMinMatchCount(int newValue) {
        if (hasMinMatchCount) {
            throw new Entitas.EntitasException("Could not set MinMatchCount!\n" + this + " already has an entity with MinMatchCountComponent!",
                "You should check if the context already has a minMatchCountEntity before setting it or use context.ReplaceMinMatchCount().");
        }
        var entity = CreateEntity();
        entity.AddMinMatchCount(newValue);
        return entity;
    }

    public void ReplaceMinMatchCount(int newValue) {
        var entity = minMatchCountEntity;
        if (entity == null) {
            entity = SetMinMatchCount(newValue);
        } else {
            entity.ReplaceMinMatchCount(newValue);
        }
    }

    public void RemoveMinMatchCount() {
        minMatchCountEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public MinMatchCountComponent minMatchCount { get { return (MinMatchCountComponent)GetComponent(ConfigComponentsLookup.MinMatchCount); } }
    public bool hasMinMatchCount { get { return HasComponent(ConfigComponentsLookup.MinMatchCount); } }

    public void AddMinMatchCount(int newValue) {
        var index = ConfigComponentsLookup.MinMatchCount;
        var component = CreateComponent<MinMatchCountComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMinMatchCount(int newValue) {
        var index = ConfigComponentsLookup.MinMatchCount;
        var component = CreateComponent<MinMatchCountComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMinMatchCount() {
        RemoveComponent(ConfigComponentsLookup.MinMatchCount);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherMinMatchCount;

    public static Entitas.IMatcher<ConfigEntity> MinMatchCount {
        get {
            if (_matcherMinMatchCount == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.MinMatchCount);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherMinMatchCount = matcher;
            }

            return _matcherMinMatchCount;
        }
    }
}
